package package1;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;



@SuppressWarnings("deprecation")
public class ExcelMaker {
	private static HSSFWorkbook wb;
	private static HSSFSheet sheet1;
	private static HSSFCellStyle headerStyle;
	private static HSSFRow row;
	@SuppressWarnings("unused")
	private static HSSFCell cell;
	private static int rownum;
	private static FormulaEvaluator evaluator;
		
	public static HSSFCellStyle styleHeader(HSSFCellStyle headerStyle){
       // styling the header
        HSSFFont headerFont = wb.createFont();
        headerFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        headerStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
        headerStyle.setFillForegroundColor(HSSFColor.YELLOW.index);
        headerStyle.setFillBackgroundColor(HSSFColor.WHITE.index);
        headerStyle.setFont(headerFont);
        headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
        return headerStyle;
	}
	
    public static void createHeader(HSSFRow row){
		   row.createCell(0).setCellValue("Circle");
       row.createCell(1).setCellValue("Account No");
       row.createCell(2).setCellValue("Account Name");
       row.createCell(3).setCellValue("Opening Balance");
       row.createCell(4).setCellValue("Debit Amt");
       row.createCell(5).setCellValue("Credit Amt");
       row.createCell(6).setCellValue("Closing Balance");
	   }
	
	public static void insertHeading(){
		 // Filling up Row 0 and Row 1 in the excel sheet
        HSSFRow row = sheet1.createRow(0);
        HSSFCell title = row.createCell(0);
        title.setCellStyle(headerStyle);
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        
        SimpleDateFormat ft = new SimpleDateFormat("E dd-MMM-yyyy");
        title.setCellValue("CPA ACCOUNT DETAILS AS ON " + ft.format(cal.getTime()));
       // System.out.println("Yesterday's date = "+ cal.getTime());
        sheet1.addMergedRegion(new CellRangeAddress(0,0,0,6));
                 
        row = sheet1.createRow(1);
        createHeader(row);
	}

	public static void fillAcctDetails(HSSFSheet sheet1, HSSFRow row,List<Object[]> groupList,int rowno){
		rownum = rowno;  
		for(Object[] arr : groupList) 
	         {
	        	 row = sheet1.createRow(rownum);
	        	 row.createCell(0).setCellValue(String.valueOf(arr[0]));
              row.createCell(1).setCellValue(String.valueOf(arr[1]).substring(7));
                row.createCell(2).setCellValue(String.valueOf(arr[2]));
                row.createCell(3).setCellValue((Double)arr[3]);
                row.createCell(4).setCellValue((Double)arr[4]);
                row.createCell(5).setCellValue((Double)arr[5]);
                row.createCell(6).setCellValue((Double)arr[6]);
            
               rownum++;  
            
	         }
	   }
	
	public static void insertTotals(){
		//Total Debit Cell
        row = sheet1.createRow(rownum); //row 26
        HSSFCell cell = row.createCell(4);		          
        cell.setCellType(Cell.CELL_TYPE_FORMULA); // Debit SUM formula
        cell.setCellFormula("SUM(E3:E25)"); 

        evaluator = wb.getCreationHelper().createFormulaEvaluator();
        evaluator =  wb.getCreationHelper().createFormulaEvaluator();
        evaluator.evaluateFormulaCell(cell);
        //cell.setCellValue("SUM(E2:E25)");
        
        
        //Total Credit Cell
        cell = row.createCell(5);
        cell.setCellType(Cell.CELL_TYPE_FORMULA);
        cell.setCellFormula("SUM(F3:F25)"); //Credit SUM formula
        evaluator.evaluateFormulaCell(cell);
        // cell.setCellValue("SUM(F2:F25)");
        
        //TOTALS Cell
        rownum++;
        row = sheet1.createRow(rownum); //row 27
        cell = row.createCell(1);		         
        cell.setCellStyle(headerStyle);
        
        cell = row.createCell(2);
        cell.setCellValue("Totals");
        cell.setCellStyle(headerStyle);
        
        cell = row.createCell(3);
        cell.setCellType(Cell.CELL_TYPE_FORMULA); //Opening Bal
        cell.setCellFormula("SUM(D3:D25)");
        cell.setCellStyle(headerStyle);
        evaluator.evaluateFormulaCell(cell);
       
        cell = row.createCell(4);		         
        cell.setCellStyle(headerStyle);
        
        cell = row.createCell(5);		         
        cell.setCellStyle(headerStyle);

        
        cell = row.createCell(6);
        cell.setCellType(Cell.CELL_TYPE_FORMULA); //Closing Bal
        cell.setCellFormula("SUM(G3:G25)");
        cell.setCellStyle(headerStyle);
        evaluator.evaluateFormulaCell(cell);

	}
	
	public static boolean insertCPAControlAcctSect(){
		 //DAILY CPA CONTROL ACCOUNT Section
        HSSFCellStyle errorStyle = wb.createCellStyle();
        HSSFFont errorFont = wb.createFont();
        
        rownum= rownum+2; //row 31
        row = sheet1.createRow(rownum);
        row.createCell(1).setCellValue("DAILY CPA CONTROL ACCOUNT");
        sheet1.addMergedRegion(new CellRangeAddress(31,31,1,6)); 
        row.getCell(1).setCellStyle(headerStyle);
        
        rownum++;
        row = sheet1.createRow(rownum);
        row.createCell(4).setCellValue("Default Value");
        
        rownum++;;		         
        row = sheet1.createRow(rownum);
        row.createCell(1).setCellValue("1");
        row.createCell(2).setCellValue("Sum of opening Balances of all  CPA Accounts");
        		         
        CellReference ref = new CellReference("D27");
        HSSFRow r = sheet1.getRow(ref.getRow());
      	 Cell c = r.getCell(ref.getCol());
      	 evaluator.evaluateFormulaCell(c);	
      	 
      	 
      	 double D27 = c.getNumericCellValue();
      	 
      	 D27 = Math.round(D27*100.0)/100.0;
      	 
      	 
      	HSSFCell cell1 = row.createCell(3);
      	cell1.setCellValue(D27);
      	if(Double.compare(D27,-9029.64)!=0)
      	{
      		errorFont.setColor(HSSFFont.COLOR_RED);
      		errorStyle.setFont(errorFont); 	
      		cell1.setCellStyle(errorStyle);
      		}
      	row.createCell(4).setCellValue("-9029.64");
      	 
      	rownum+=2; //row 35
      	row = sheet1.createRow(rownum);
        row.createCell(1).setCellValue("2");
        row.createCell(2).setCellValue("Sum of closing Balances of all  CPA Accounts");
       		       	
        ref = new CellReference("G27");
         r = sheet1.getRow(ref.getRow());
      	  c = r.getCell(ref.getCol());
      	 evaluator.evaluateFormulaCell(c);
      	double G27 = c.getNumericCellValue();
      	cell1 = row.createCell(3); 
      	cell1.setCellValue(G27);
      	
       G27 = Math.round(G27*100.0)/100.0;
      	
      	if(Double.compare(G27,-9029.64)!=0)
      	{
      		errorFont.setColor(HSSFFont.COLOR_RED);
      		errorStyle.setFont(errorFont); 	
      		cell1.setCellStyle(errorStyle);
      		}
      	
       row.createCell(4).setCellValue("-9029.64");
      	
   	rownum+=2; //row 37
      	row = sheet1.createRow(rownum);
        row.createCell(1).setCellValue("3");
        row.createCell(2).setCellValue("Total credit transactions for the day");
       
        ref = new CellReference("F26");
         r = sheet1.getRow(ref.getRow());
      	  c = r.getCell(ref.getCol());
      	 evaluator.evaluateFormulaCell(c);
      	double F26 = c.getNumericCellValue();
      	cell1=row.createCell(3);
      	cell1.setCellValue(F26);
      	
      	F26 = Math.round(F26*100.0)/100.0;
      	
      		       	
      	rownum+=2; //row 39
      	row = sheet1.createRow(rownum);
        row.createCell(1).setCellValue("4");
        row.createCell(2).setCellValue("Total debit transactions for the day");
       
        ref = new CellReference("E26");
         r = sheet1.getRow(ref.getRow());
      	  c = r.getCell(ref.getCol());
      	 evaluator.evaluateFormulaCell(c);
    	double E26 = c.getNumericCellValue();
      	HSSFCell cell2=row.createCell(3);
      	cell2.setCellValue(E26);
      	
   	E26 = Math.round(E26*100.0)/100.0;
        
      	if(Double.compare(F26,-E26)!=0)
      	{
      		errorFont.setColor(HSSFFont.COLOR_RED);
      		errorStyle.setFont(errorFont); 
      		cell1.setCellStyle(errorStyle);
      		cell2.setCellStyle(errorStyle);
      		}
      	
               // Checking Mismatch condition
               boolean discrepancy=false;
               
               if(Double.compare(D27,G27)!=0 || Double.compare(E26,-F26)!=0)
               {
               	discrepancy = true;
               }
               
               return discrepancy;    
        
        }
	
	public static void insertMismatchSect(boolean discrepancy,String sheetname){
	 	// MISMATCH IF ANY Section
       	
       	rownum+=2;
       	row = sheet1.createRow(rownum);
         row.createCell(0).setCellValue("MISMATCH IF ANY");
         sheet1.addMergedRegion(new CellRangeAddress(rownum,rownum,0,6)); 
         row.getCell(0).setCellStyle(headerStyle);
       	      	
        
	         rownum++;
	         row = sheet1.createRow(rownum);
	         createHeader(row);
                
                // Checking Mismatch condition
            
                if(discrepancy == true){
                	
                	double debit,credit,closebal,openbal;
                	
                	Sheet sheet = wb.getSheet(sheetname);
                	for (int i = 2; i <= 25; i++) {
                	    Row cpa_row = sheet.getRow(i);
                    	 if(cpa_row.getRowNum()==0 || cpa_row.getRowNum()==1){
                    	    continue; //skip the rows if row number is 0 or 1
                    	 }
                    	else if(cpa_row.getRowNum()==25)
                    	 {
                    	    break; //skip the rows if row number is 0 or 1
                    	 }
                    	 else{
                       Cell cpa_cell = cpa_row.getCell(3);
                       openbal = cpa_cell.getNumericCellValue();
                       cpa_cell = cpa_row.getCell(6);
                       closebal = cpa_cell.getNumericCellValue();
                       cpa_cell = cpa_row.getCell(4);
                       debit = cpa_cell.getNumericCellValue();
                       cpa_cell = cpa_row.getCell(5);
                       credit = cpa_cell.getNumericCellValue();
                       
                       if(Double.compare(openbal,closebal)!=0 || Double.compare(debit,-credit)!=0)
                       {
                    	   rownum++;
                    	   row = sheet1.createRow(rownum);
                    	   row.createCell(0).setCellValue(cpa_row.getCell(0).getStringCellValue());
   	                    row.createCell(1).setCellValue(cpa_row.getCell(1).getStringCellValue().substring(7));
   	                    row.createCell(2).setCellValue(cpa_row.getCell(2).getStringCellValue());
   	                    row.createCell(3).setCellValue(cpa_row.getCell(3).getNumericCellValue());
   	                    row.createCell(4).setCellValue(cpa_row.getCell(4).getNumericCellValue());
   	                    row.createCell(5).setCellValue(cpa_row.getCell(5).getNumericCellValue());
   	                    row.createCell(6).setCellValue(cpa_row.getCell(6).getNumericCellValue());
                       }
                    }
                    }
                	
                }

	}
	
	public static void insertControlAcctSect(){
		HSSFRow r;
		HSSFCell c;
		CellReference ref;
		 rownum+=2;
	       	row = sheet1.createRow(rownum);
	         row.createCell(0).setCellValue("Control Accounts Verification");
	         sheet1.addMergedRegion(new CellRangeAddress(rownum,rownum,0,6)); 
	         row.getCell(0).setCellStyle(headerStyle);
      
        rownum++;		         
         row = sheet1.createRow(rownum);
         row.createCell(1).setCellValue("1");
         row.createCell(2).setCellValue("Balance in IMPS settlement account");
      
      
      ref = new CellReference("G29");
   r = sheet1.getRow(ref.getRow());
	  c = r.getCell(ref.getCol());
	 evaluator.evaluateFormulaCell(c);
	row.createCell(3).setCellValue(c.getNumericCellValue());
	
	
 rownum+=2;		         
    row = sheet1.createRow(rownum);
    row.createCell(1).setCellValue("2");
    row.createCell(2).setCellValue("Balance in NEFT settlement account");

    
  ref = new CellReference("G28");
   r = sheet1.getRow(ref.getRow());
	  c = r.getCell(ref.getCol());
	 evaluator.evaluateFormulaCell(c);
	row.createCell(3).setCellValue(c.getNumericCellValue());

	}
	
	public static void autosizeColumn(int startcol,int endcol){
		   for(int i=startcol;i<=endcol;i++)
		   {
			   sheet1.autoSizeColumn(i);
		   }
	   } 
	   
	public static boolean CPAExcel(List<Object[]> groupList,int rownum,String sheetname){
		 FileOutputStream fileOut = null;
      
            //Creating a new WB and Sheet
		 		
                 wb = new HSSFWorkbook();
                 try
                 {
                   fileOut = new FileOutputStream("C:\\excel\\" + "CPA" + ".xls");
                 }
              catch (FileNotFoundException e)
                 {
                   e.printStackTrace();
                 }
     
				
		
                 sheet1 = wb.createSheet(sheetname);
                 headerStyle = wb.createCellStyle();
                 headerStyle = styleHeader(headerStyle);
                           	                        
              
                 insertHeading();
                 
                 rownum=2;
                 fillAcctDetails(sheet1, row, groupList, rownum);
                 
                 insertTotals();
                 
                 List<Object[]> groupList2= DataFetcher.fetchData("select Circle,AccNo,CustName,OpenBal,Debit,Credit,CloseBal from CpaTable where AccNo in (1000000047,1000000183)");

   		         rownum++;
   		         
   		         fillAcctDetails(sheet1, row, groupList2, rownum);
                 
                 boolean discr = insertCPAControlAcctSect();
                 
                 insertMismatchSect(discr,sheetname);
                 
                 insertControlAcctSect(); 
                 
              	 autosizeColumn(0,6);   
              	 
              	try {
					wb.write(fileOut);
					fileOut.flush();
		            fileOut.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
              
               return discr;
	  }
}
